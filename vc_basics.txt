14 May 2017

Reflections from lessons learned


version control (VC) in Linux is used like this:

diff -u <oldFileName> <newFileName>

**differences will print to screen:

+for adds
-for removals 

## GIT

git commit: PITC

git diff <id_1> <id_2> :changes as "pluses" and "minuses"

git log --grep='<SEARCH_STRING>': searching for a commit 
git log --author=""
git log --stat (gives information about file changes with each commit)
git log --graph <branchName>
got log --oneline <branchName>

git config --global user.email "utter.linguist@gmail.com"
git config --global user.name "Bachman"

git checkout master
git checkout -b <newBranchName> ##creates and checks out target branch

git merge <master> <otherBranch(es)>

git branch <name of branch>
---> switch to branch: git checkout <name of branch>

#Extend Caching time 
git config --global credential.helper cache
# Set git to use the credential memory cache

git config --global credential.helper 'cache --timeout=3600'
# Set the cache to timeout after 1 hour (setting is in seconds)

#######  USING GIT HUB #########
git Hub: cloud for version control

git remote (-v) lists the name of the repos on git
----> origin is a good naming convention for the seminal node

##add seminal node to gitHub
git remote add <nameOfNode> <URL/yourUserName/repoName.git>
----> EXAMPLE: git remote add origin https://github.com/mbachWondersWhy/recipes.git

##commits TO gitHub from local
git push <seminalNode> <localBranch>
----> EXAMPLE: git push origin master

## commits FROM gitHub to Local
git pull <seminalNode> <localBranch>
----> EXAMPLE: git pull origin master

##clone repo from gitHub to local
git clone <URL/yourUserName/repoName.git>
## git will create a local directory named by the repoName

##forking
Forking is a clone WITHIN GITHUB only





Version Control (not exhaustive):
- Git
- GoogleDocs
- SVN
- Manual Save
- DropBox/ Box

To save a version in Git: Commit
To check version differences in Git: git diff

A good rule of thumb is to make one commit per logical change. For example, if you fixed a typo, then fixed a bug in a separate part of the file, you should use one commit for each change since they are logically separate. If you do this, each commit will have one purpose that can be easily understood. Git allows you to write a short message explaining what was changed in each commit, and that message will be more useful if each commit has a single logical change.
